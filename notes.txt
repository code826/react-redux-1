import { createSlice } from '@reduxjs/toolkit';
import { increment, decrement } from './counterSlice';

const logSlice = createSlice({
  name: 'log',
  initialState: [],
  reducers: {}, // No local reducers for this example
  extraReducers: (builder) => {
    builder
      .addCase(increment, (state) => {
        state.push('Counter incremented');
      })
      .addCase(decrement, (state) => {
        state.push('Counter decremented');
      });
  },
});

export default logSlice.reducer;


import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

// Async action to fetch data
export const fetchData = createAsyncThunk('data/fetchData', async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
  const data = await response.json();
  return data; // This becomes the payload of the fulfilled action
});


const dataSlice = createSlice({
  name: 'data',
  initialState: {
    data: null,
    loading: false,
    error: null,
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchData.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchData.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(fetchData.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      });
  },
});

export default dataSlice.reducer;


const initialState = { value: 0 };

const counterReducer = (state = initialState, action) => {
  switch (action.type) {
    case 'counter/increment':
      return { value: state.value + 1 };
    default:
      return state;
  }
};

const store = configureStore({
  reducer: counterReducer,
  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(loggerMiddleware),
});

store.dispatch({ type: 'counter/increment' });


npx create-react-app my-app --template redux

//will do the check why not working


